vue的形式是：
new Vue({
    el:"#app",
    data:{
        ...
    },
    methods{
        ...
    },
    computed:{

    },
    ...
})
要用到vue的东西外面需要套上一个id为app的标签
控制台里面想要双向绑定的话需要在new Vue前面加上var vm
想要得到el或data元素的话前面要加$
也就是vm.$el &  vm.$data

v-model:input标签里面的值会用到这个
v-text:标签里面的内容会引入
v-html：同上，区别在于可以解析vue里面的标签

双向绑定重点：
 访问器属性
    Object.defineProperty(obj,'name',{
        set:function(val){
            console.log(val);
        }，
        get:function(){

        }

    })

v-on: 可以用@来进行省略 例如        <button @click="fn(1,2)">click</button>
函数的定义要写在methods方法里面 参数可以传 也可以不传 不传的话有一个event自带参数

v-bind：用来绑定属性 例如        <div :class="[classA,classB]"></div>
但是有两个特殊的东西 一个是class
 另一个是style 
 它们分别有三种不同的绑定方式
        <div :class="{red:isRed,font:isFont}">ddddddddddd</div>  定义对象 data里面要写  isRed:false,              true时生效
                                                                                        isFont:true,


        <div :class="classObj">ddddddddddd</div>                     classObj:{
                                                                                    red:true,
                                                                                    font:false
                                                                                }


        <div :class="[classA,classB]">ddddddddddd</div>                     classA:'red',
                                                                             classB:'font'








        <div :style="{background:bgStyle}">dddddd</div>               bgStyle:"red"

        <div :style="styleObj">dddddd</div>                        styleObj:{
                                                                                background:'red',
                                                                                "font-size":'40px'
                                                                            },

        <div :style="[styleA,styleB]">dddddd</div>                 styleA:{
                                                                                background:'red',
                                                                                color:'green'
                                                                            },
                                                                            styleB:{
                                                                                "font-size":'40px'
                                                                            },








v-for:      <li v-for='(val,index) in arr'>
                {{val}},{{index+1}}
                <a href=""> {{val}}</a>
            </li> 
data里面要写arr:[1,2,3]

还有一种是直接循环，in几次就循环几次 下面这个标签有“不会显示在dom结构里，但是可以起到循环里面的结构的作用”；   
             <template v-for="n in 3">
                    <p>pppppp</p>
                    <h1>hhhhhhhhhh</h1>
                    <span>ssssssssss</span>
            </template>

  
vue通过索引直接去改变数组的值不会引起视图的改变
但是数组会变
要想改变试图，就要用到Vue.set(你要改变的数组，索引， ‘新的值’)
或者用到数组自带的方法.splice();
.splice();数组一个参数的时候改变数组长度，但是也不会显示在视图上


变异方法可以更新视图
.push
.pop
.unshift
.shift

可以改变原数组的方法叫做变异方法



component组件：
组件是自定义元素，可以扩展html元素
分为全局变量和局部变量
全局是，只要绑定了自定义的标签，就会拓展
但是局部的话需要用prop来进行绑定并且只在单独自己的作用域范围内
每个组件都有自己单独的作用域，也就是说，不能在子组件引用父组件数据
js代码中如果遇到大写的字母，那么在dom结构中要小写并且前面加上中横线-
当在data里面给参数进行传值的时候，要在dom结构中bind元素，动态绑定
prop数组方法用来给局部变量绑定
爹传给孩子叫做prop

    <div id="app">
       <demo1 :my-msg1='a' msg2='ccccc'></demo1>
       <demo1  :my-msg1='b'></demo1>
    </div>

 components:{
                demo1:{
                    template:'<h1>{{myMsg1}},{{msg2}}</h1>',
                    props:['myMsg1','msg2']
                }
               
            }

data的值要传给组件



slot:
分发：
单个slot时，只有在没有要分发的内容时，才会显示
它可以用一个特殊的属性name来进一步配置如何分发内容，多个插槽可以有不同的名字，同名插槽将匹配内容片段中对应的slot特性的元素
只会找子标签